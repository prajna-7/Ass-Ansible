- hosts: webservers
  become: true
  gather_facts: true

  tasks:
    - name: Copy Flask app to remote server
      copy:
        src: ./application2.py
        dest: /home/application2.py
        mode: '0755'

    - name: Install Python 3 and pip
      become: true
      apt:
        name:
          - python3
          - python3-pip
        update_cache: yes

    - name: Install Flask
      become: true
      pip:
        name: Flask

    - name: Create systemd unit file for application2
      copy:
        src: ./application2.service
        dest: /etc/systemd/system/application2.service
        mode: '0777'

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Enable and start application2 service
      systemd:
        name: application2.service
        state: started
        enabled: yes

- hosts: haproxy
  become: true
  gather_facts: true
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install HAProxy
      apt:
        name: haproxy
        state: latest

    - name: Configure HAProxy
      template:
        src: ./haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      vars:
        haproxy_ip: "{{ hostvars['haproxy']['ansible_default_ipv4']['address'] }}"
      when: "'ansible_default_ipv4' in hostvars['haproxy']"
      notify: restart haproxy

    - name: Test deployed application
      uri:
        url: "http://{{ hostvars['haproxy']['ansible_host'] | default(hostvars['haproxy']['ansible_default_ipv4']['address']) }}:80"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: response
      retries: 3
      delay: 10

    - name: Verify application response
      assert:
        that:
          - "'Serving from' in response.content"
          - "'Serving from' in response.content"
          - "'Serving from' in response.content"
      when: response is defined and response.status == 200

  handlers:
    - name: restart haproxy
      service:
        name: haproxy
        state: restarted

