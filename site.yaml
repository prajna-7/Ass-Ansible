- hosts: webservers
  become: true
  gather_facts: true

  tasks:
    - name: Copy Flask app to remote server
      copy:
        src: ./application2.py
        dest: /home/ubuntu/application2.py
        mode: '0755'

    - name: Install Python 3 and pip
      become: true
      apt:
        name:
          - python3
          - python3-pip
        update_cache: yes

    - name: Install Flask
      become: true
      pip:
        name: Flask

    - name: Create systemd unit file for application2
      copy:
        src: ./application2.service
        dest: /etc/systemd/system/application2.service
        mode: '0777'

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Enable and start application2 service
      systemd:
        name: application2.service
        state: started
        enabled: yes

    - name: Install SNMPd
      become: true
      apt:
        name: snmpd
        state: present

    - name: Modify SNMPd configuration
      become: true
      lineinfile:
        path: /etc/snmp/snmpd.conf
        regexp: '^#?{{ item.regexp }}'
        line: '{{ item.line }}'
      with_items:
       - { regexp: 'agentAddress\s+udp:.*', line: 'agentAddress udp:161,udp6:[::1]:161' }
       - { regexp: 'agentAddress\s+udp:.*public$', line: 'agentAddress udp:1611,udp6:[::1]:1611' }
        
    - name: Restart snmpd
      ansible.builtin.systemd:
        name: snmpd
        state: restarted

- hosts: HAproxy
  become: true
  gather_facts: true
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install curl
      apt:
        name: curl
        state: latest
        
    - name: Install HAProxy
      apt:
        name: haproxy
        state: latest
                      
    - name: Install Nginx
      apt:
        name: nginx
        state: latest
          
    - name: Copy Nginx configuration
      become: true
      template:
        src: ./nginx.conf.j2
        dest: /etc/nginx/nginx.conf
        owner: root
        group: root
        mode: '0644'     
         
    - name: Restart nginx
      ansible.builtin.shell:
        cmd: "sudo service nginx restart"          
            
    - name: Configure HAProxy
      template:
        src: ./haproxy.cfg.j2
        dest: /etc/haproxy/haproxy.cfg
      vars:
        haproxy_ip: "{{ hostvars['HAproxy']['ansible_default_ipv4']['address'] }}"
      when: "'ansible_default_ipv4' in hostvars['HAproxy']"
                
    - name: Restart haproxy
      ansible.builtin.shell:
        cmd: "sudo service haproxy restart"

    - name: Test deployed application
      uri:
        url: "http://{{ hostvars['HAproxy']['ansible_host'] | default(hostvars['HAproxy']['ansible_default_ipv4']['address']) }}:80"
        return_content: yes
        status_code: 200
        validate_certs: no
      register: response
      retries: 3
      delay: 10

    - name: Verify application response
      assert:
        that:
          - "'Serving from' in response.content"
          - "'Serving from' in response.content"
          - "'Serving from' in response.content"
      when: response is defined and response.status == 200


